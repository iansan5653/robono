{"version":3,"sources":["CallList/CallList.tsx","MainPage/MainPage.tsx","CallSetupOption/CallSetupOption.tsx","CallSetupQuestion/CallSetupQuestion.tsx","CallPage/CallPage.tsx","CallSetupPage/CallSetupPage.tsx","fetchData.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["CallList","List","className","this","props","callees","map","callee","index","Fragment","key","ListItem","button","onClick","onSelectCallee","ListItemIcon","color","ListItemText","primary","name","secondary","description","Divider","variant","component","React","Component","MainPage","state","displayedCallees","sort","a","b","compareStringsForSort","filter","setState","option","toLowerCase","includes","trim","Container","maxWidth","Typography","gutterBottom","appName","TextField","id","type","fullWidth","label","onChange","event","filterList","target","value","console","log","autoComplete","bind","align","CallSetupQuestion","selected","FormControlLabel","dialNumber","control","Radio","text","handleSelect","menu","question","RadioGroup","options","onChoose","defaultValue","phoneNumber","margin","InputProps","readOnly","Button","href","endIcon","CallSetupPage","container","selections","startCloseTransition","displayClass","onClose","window","setTimeout","handleChoice","selection","push","currentMenu","next","handleUndo","pop","length","generatePhoneNumber","result","forEach","page","AppBar","position","Toolbar","IconButton","edge","display","startIcon","ENDPOINT","process","getJsonData","url","fetch","response","ok","json","info","Error","statusText","loadMenuByID","menuID","loadCompanies","App","goHome","callSetupPage","undefined","goToCallSetup","loading","companies","alert","error","CircularProgress","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","document","getElementById","URL","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"ieAeqBA,G,uLACT,IAAD,OACP,OACE,kBAACC,EAAA,EAAD,CAAMC,UAAU,YACbC,KAAKC,MAAMC,QAAQC,KAAI,SAACC,EAAQC,GAC/B,OACE,kBAAC,IAAMC,SAAP,CAAgBC,IAAKF,GACnB,kBAACG,EAAA,EAAD,CACEC,QAAM,EACNC,QAAS,kBAAM,EAAKT,MAAMU,eAAeP,KAEzC,kBAACQ,EAAA,EAAD,KACE,kBAAC,IAAD,CAAWC,MAAM,aAEnB,kBAACC,EAAA,EAAD,CACEC,QAASX,EAAOY,KAChBC,UAAWb,EAAOc,eAGtB,kBAACC,EAAA,EAAD,CAASC,QAAQ,QAAQC,UAAU,gB,GAnBXC,IAAMC,Y,sCCavBC,E,YACnB,WAAYvB,GAAe,IAAD,8BACxB,4CAAMA,KACDwB,MAAQ,CACXC,iBAAkB,EAAKzB,MAAMC,QAAQyB,MAAK,SAACC,EAAGC,GAAJ,OAdhD,SAA+BD,EAAWC,GACxC,OAAID,EAAIC,EACC,EAELA,EAAID,GACE,EAEH,EAQDE,CAAsBF,EAAEZ,KAAMa,EAAEb,UAJZ,E,wEASfe,GACT/B,KAAKgC,SAAS,CACZN,iBAAkB1B,KAAKC,MAAMC,QAAQ6B,QAAO,SAAAE,GAAM,OAChDA,EAAOjB,KAAKkB,cAAcC,SAASJ,EAAOG,cAAcE,e,+BAKpD,IAAD,OACP,OACE,kBAACC,EAAA,EAAD,CAAWC,SAAS,KAAKvC,UAAU,qBACjC,kBAACwC,EAAA,EAAD,CACEnB,QAAQ,KACRC,UAAU,KACVmB,cAAY,EACZ3B,MAAM,UACNd,UAAU,aAETC,KAAKC,MAAMwC,SAEd,kBAACC,EAAA,EAAD,CACEC,GAAG,SACH5C,UAAU,YACV6C,KAAK,SACLxB,QAAQ,WACRyB,WAAS,EACTC,MAAM,SACNC,SAAU,SAAAC,GACR,EAAKC,WAAWD,EAAME,OAAOC,OAC7BC,QAAQC,IAAIL,EAAME,OAAOC,QAE3BG,aAAa,QAEf,kBAAC,EAAD,CACEpD,QAASF,KAAKyB,MAAMC,iBACpBf,eAAgBX,KAAKC,MAAMU,eAAe4C,KAAKvD,QAEjD,kBAACuC,EAAA,EAAD,CACEnB,QAAQ,QACRC,UAAU,SACVR,MAAM,gBACN2C,MAAM,SACNzD,UAAU,UAETC,KAAKC,MAAMwC,QAPd,wC,GA/C8BnB,IAAMC,W,iGCbvBkC,E,2MACnBhC,MAAQ,CACNiC,UAAU,G,8EAIV1D,KAAKgC,SAAS,CAAE0B,UAAU,M,+BAGlB,IAAD,OACP,OACE,kBAACC,EAAA,EAAD,CACER,MAAOnD,KAAKC,MAAMgC,OAAO2B,WACzBC,QAAS,kBAACC,EAAA,EAAD,MACThB,MAAO9C,KAAKC,MAAMgC,OAAO8B,KACzBhB,SAAU,WACR,EAAK9C,MAAMS,UACX,EAAKsD,sB,GAjBgC1C,IAAMC,WCHhCkC,G,uLACT,IAAD,OACP,OACE,oCACE,kBAAClB,EAAA,EAAD,CAAYnB,QAAQ,KAAKC,UAAU,KAAKmB,cAAY,GACjDxC,KAAKC,MAAMgE,KAAKC,UAEnB,kBAACC,EAAA,EAAD,KACGnE,KAAKC,MAAMgE,KAAKG,QAAQjE,KAAI,SAAC8B,EAAQ5B,GACpC,OACE,yBAAKN,UAAU,UAAUQ,IAAKF,GAC5B,kBAAC,EAAD,CACE4B,OAAQA,EACR1B,IAAKF,EACLK,QAAS,kBAAM,EAAKT,MAAMoE,SAASpC,gB,GAdNX,IAAMC,YCDhCkC,G,uLAEjB,OACE,yBAAK1D,UAAU,qBACb,kBAACwC,EAAA,EAAD,CAAYnB,QAAQ,QAAQC,UAAU,QAAtC,+HAGE,6BACA,6BAJF,oIAQA,kBAACqB,EAAA,EAAD,CACEI,MAAM,yBACNwB,aAActE,KAAKC,MAAMsE,YACzBC,OAAO,SACPC,WAAY,CACVC,UAAU,GAEZtD,QAAQ,WACRrB,UAAU,aAEZ,kBAAC4E,EAAA,EAAD,CACE9D,MAAM,UACN+D,KAAI,cAAS5E,KAAKC,MAAMsE,aACxBM,QAAS,kBAAC,IAAD,MACTzD,QAAQ,aAJV,mB,GAtBuCE,IAAMC,YCehCuD,G,kBAInB,WAAY7E,GAAe,IAAD,8BACxB,4CAAMA,KAJR8E,eAG0B,IAF1BC,gBAE0B,IAM1BC,qBAAuB,WACrB,EAAKjD,SAAS,CAAEkD,aAAc,cAC1B,EAAKjF,MAAMkF,SACbC,OAAOC,WAAW,EAAKpF,MAAMkF,QAAS,MAThB,EAa1BG,aAAe,SAACC,GACd,EAAKP,WAAWQ,KAAKD,GACrB,EAAKvD,SAAS,CAAEyD,YAAaF,EAAUG,QAff,EAkB1BC,WAAa,WACX,EAAKX,WAAWY,MAChB,EAAK5D,SAAS,CACZyD,YACE,EAAKT,WAAWa,OAAS,EACrB,EAAKb,WAAW,EAAKA,WAAWa,OAAS,GAAGH,KAC5C,EAAKzF,MAAMgE,QAxBK,EA4B1B6B,oBAAsB,WACpB,IAAIC,EAAS,EAAK9F,MAAMG,OAAOmE,YAI/B,OAHA,EAAKS,WAAWgB,SAAQ,SAAAT,GACtBQ,GAAM,aAAUR,EAAU3B,eAErBmC,GA/BP,EAAKtE,MAAQ,CAAEyD,aAAc,UAAWO,YAAa,EAAKxF,MAAMgE,MAChE,EAAKe,WAAa,GAHM,E,sEAoChB,IACJiB,EADG,OAaP,OAVEA,EAD6B,OAA3BjG,KAAKyB,MAAMgE,YAEX,kBAAC,EAAD,CACExB,KAAMjE,KAAKyB,MAAMgE,YACjBpB,SAAU,SAAAkB,GAAS,OAAI,EAAKD,aAAaC,MAItC,kBAAC,EAAD,CAAUhB,YAAavE,KAAK8F,wBAInC,yBAAK/F,UAAS,6BAAwBC,KAAKyB,MAAMyD,eAC/C,kBAACgB,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,CAASrG,UAAU,mBACjB,kBAACsG,EAAA,EAAD,CACEC,KAAK,QACLzF,MAAM,UACNH,QAASV,KAAKiF,sBAEd,kBAAC,IAAD,OAEF,kBAAC1C,EAAA,EAAD,CAAYnB,QAAQ,KAAKC,UAAU,KAAKkF,QAAQ,UAAhD,eACevG,KAAKC,MAAMG,OAAOY,QAIrC,kBAACqB,EAAA,EAAD,CAAWtC,UAAU,yBAAyBuC,SAAS,MACpD2D,EACAjG,KAAKyB,MAAMgE,cAAgBzF,KAAKC,MAAMgE,MACrC,kBAACmC,EAAA,EAAD,CAASrG,UAAU,gCACjB,kBAAC4E,EAAA,EAAD,CACE9D,MAAM,UACN2F,UAAW,kBAAC,IAAD,MACXpF,QAAQ,WACRV,QAASV,KAAK2F,YAJhB,e,GAzE6BrE,IAAMC,YCxB3CkF,EAAWC,O,SAGFC,E,8EAAf,WAA2BC,GAA3B,eAAAhF,EAAA,sEACyBiF,MAAMD,GAD/B,YACQE,EADR,QAEeC,GAFf,gCAGiBD,EAASE,OAH1B,qDAKI5D,QAAQ6D,KAAKH,GACP,IAAII,MAAMJ,EAASK,YAN7B,6C,sBAUO,SAAeC,EAAtB,kC,4CAAO,WAA4BC,GAA5B,SAAAzF,EAAA,sEACQ+E,EAAY,GAAD,OAAIF,EAAJ,kBAAsBY,IADzC,oF,sBAIA,SAAeC,IAAtB,+B,4CAAO,sBAAA1F,EAAA,sEACQ+E,EAAY,GAAD,OAAIF,EAAJ,iBADnB,oF,sBAhBPrD,QAAQC,IAAIoD,G,aCeSc,E,YACnB,WAAYtH,GAAY,IAAD,8BACrB,4CAAMA,KAQRuH,OAAS,WACP,EAAKxF,SAAS,CACZyF,mBAAeC,KAXI,EAevBC,cAfuB,uCAeP,WAAOvH,GAAP,eAAAwB,EAAA,6DACd,EAAKI,SAAS,CAAE4F,SAAS,IADX,SAEKR,EAAahH,EAAOiH,QAFzB,OAERpD,EAFQ,OAGd,EAAKjC,SAAS,CACZyF,cACE,kBAAC,EAAD,CAAetC,QAAS,EAAKqC,OAAQpH,OAAQA,EAAQ6D,KAAMA,IAE7D2D,SAAS,IAPG,2CAfO,wDA0BvBN,cA1BuB,sBA0BP,4BAAA1F,EAAA,+EAEY0F,IAFZ,OAENO,EAFM,OAGZ,EAAK7F,SAAS,CAAE6F,UAAWA,EAAWD,SAAS,IAHnC,gDAKZE,MACE,wEAEF1E,QAAQ2E,MAAR,MARY,yDAxBd,EAAKtG,MAAQ,CACXgG,mBAAeC,EACfE,SAAS,GAEX,EAAKN,gBANgB,E,sEAuCrB,OACE,yCAC4BI,IAAzB1H,KAAKyB,MAAMoG,UACV,kBAAC,EAAD,CACE3H,QAASF,KAAKyB,MAAMoG,UACpBpF,QArDK,qBAsDL9B,eAAgBX,KAAK2H,gBAGvB,kBAACpF,EAAA,EAAD,CAAYnB,QAAQ,SAApB,cARJ,IAWE,kBAAC4G,EAAA,EAAD,CACEjI,UAAS,0BACPC,KAAKyB,MAAMmG,QAAU,UAAY,YAGpC5H,KAAKyB,MAAMgG,mB,GAzDanG,IAAMC,WCNjC0G,EAAcC,QACW,cAA7B9C,OAAO+C,SAASC,UAEe,UAA7BhD,OAAO+C,SAASC,UAEhBhD,OAAO+C,SAASC,SAASC,MACvB,2DA8CN,SAASC,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBtH,QACfgH,UAAUC,cAAcQ,YAI1B9F,QAAQC,IACN,iHAKEmF,GAAUA,EAAOW,UACnBX,EAAOW,SAASN,KAMlBzF,QAAQC,IAAI,sCAGRmF,GAAUA,EAAOY,WACnBZ,EAAOY,UAAUP,WAO5BQ,OAAM,SAAAtB,GACL3E,QAAQ2E,MAAM,4CAA6CA,MCnGjEuB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDsB1C,SAAkBjB,GACvB,GAA6C,kBAAmBC,UAAW,CAMzE,GAJkB,IAAIiB,IACnBhD,GACDtB,OAAO+C,SAASvD,MAEJ+E,SAAWvE,OAAO+C,SAASwB,OAIvC,OAGFvE,OAAOwE,iBAAiB,QAAQ,WAC9B,IAAMrB,EAAK,UAAM7B,GAAN,sBAEPuB,IAgEV,SAAiCM,EAAeC,GAE9C3B,MAAM0B,GACHK,MAAK,SAAA9B,GAEJ,IAAM+C,EAAc/C,EAASgD,QAAQC,IAAI,gBAEnB,MAApBjD,EAASkD,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5CxB,UAAUC,cAAcwB,MAAMtB,MAAK,SAAAC,GACjCA,EAAasB,aAAavB,MAAK,WAC7BxD,OAAO+C,SAASiC,eAKpB9B,EAAgBC,EAAOC,MAG1Ba,OAAM,WACLjG,QAAQC,IACN,oEArFAgH,CAAwB9B,EAAOC,GAI/BC,UAAUC,cAAcwB,MAAMtB,MAAK,WACjCxF,QAAQC,IACN,iHAMJiF,EAAgBC,EAAOC,OChD/BE,K","file":"static/js/main.ad9f414b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport PhoneIcon from \"@material-ui/icons/Phone\";\r\nimport \"./CallList.css\";\r\nimport { Callee } from \"../interface\";\r\n\r\ninterface Props {\r\n  callees: Callee[];\r\n  onSelectCallee: (callee: Callee) => void;\r\n}\r\n\r\nexport default class CallList extends React.Component<Props> {\r\n  render() {\r\n    return (\r\n      <List className=\"callList\">\r\n        {this.props.callees.map((callee, index) => {\r\n          return (\r\n            <React.Fragment key={index}>\r\n              <ListItem\r\n                button\r\n                onClick={() => this.props.onSelectCallee(callee)}\r\n              >\r\n                <ListItemIcon>\r\n                  <PhoneIcon color=\"primary\" />\r\n                </ListItemIcon>\r\n                <ListItemText\r\n                  primary={callee.name}\r\n                  secondary={callee.description}\r\n                />\r\n              </ListItem>\r\n              <Divider variant=\"inset\" component=\"li\" />\r\n            </React.Fragment>\r\n          );\r\n        })}\r\n      </List>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport CallList from \"../CallList/CallList\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { Callee } from \"../interface\";\r\nimport \"./MainPage.css\";\r\nimport { Container } from \"@material-ui/core\";\r\n\r\ninterface Props {\r\n  callees: Callee[];\r\n  appName: string;\r\n  onSelectCallee: (callee: Callee) => void;\r\n}\r\n\r\ninterface State {\r\n  displayedCallees: Callee[];\r\n}\r\n\r\nfunction compareStringsForSort(a: string, b: string): number {\r\n  if (a > b) {\r\n    return 1;\r\n  }\r\n  if (b > a) {\r\n    return -1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nexport default class MainPage extends React.Component<Props, State> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.state = {\r\n      displayedCallees: this.props.callees.sort((a, b) =>\r\n        compareStringsForSort(a.name, b.name)\r\n      )\r\n    };\r\n  }\r\n\r\n  filterList(filter: string): void {\r\n    this.setState({\r\n      displayedCallees: this.props.callees.filter(option =>\r\n        option.name.toLowerCase().includes(filter.toLowerCase().trim())\r\n      )\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Container maxWidth=\"md\" className=\"mainPageContainer\">\r\n        <Typography\r\n          variant=\"h6\"\r\n          component=\"h1\"\r\n          gutterBottom\r\n          color=\"primary\"\r\n          className=\"pageTitle\"\r\n        >\r\n          {this.props.appName}\r\n        </Typography>\r\n        <TextField\r\n          id=\"search\"\r\n          className=\"searchBox\"\r\n          type=\"search\"\r\n          variant=\"outlined\"\r\n          fullWidth\r\n          label=\"Filter\"\r\n          onChange={event => {\r\n            this.filterList(event.target.value);\r\n            console.log(event.target.value);\r\n          }}\r\n          autoComplete=\"off\"\r\n        />\r\n        <CallList\r\n          callees={this.state.displayedCallees}\r\n          onSelectCallee={this.props.onSelectCallee.bind(this)}\r\n        />\r\n        <Typography\r\n          variant=\"body2\"\r\n          component=\"footer\"\r\n          color=\"textSecondary\"\r\n          align=\"center\"\r\n          className=\"footer\"\r\n        >\r\n          {this.props.appName} is a project from HackGT 2019.\r\n        </Typography>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { MenuOption } from \"../interface\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\n\r\ninterface Props {\r\n  option: MenuOption;\r\n  key: number;\r\n  onClick: () => void;\r\n}\r\n\r\ninterface State {\r\n  selected: boolean;\r\n}\r\n\r\nexport default class CallSetupQuestion extends React.Component<Props, State> {\r\n  state = {\r\n    selected: false\r\n  };\r\n\r\n  handleSelect() {\r\n    this.setState({ selected: true });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <FormControlLabel\r\n        value={this.props.option.dialNumber}\r\n        control={<Radio />}\r\n        label={this.props.option.text}\r\n        onChange={() => {\r\n          this.props.onClick();\r\n          this.handleSelect();\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { MenuOption, Menu } from \"../interface\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport CallSetupOption from \"../CallSetupOption/CallSetupOption\";\r\nimport \"./CallSetupQuestion.css\";\r\n\r\ninterface Props {\r\n  menu: Menu;\r\n  onChoose: (selection: MenuOption) => void;\r\n}\r\n\r\nexport default class CallSetupQuestion extends React.Component<Props> {\r\n  render() {\r\n    return (\r\n      <>\r\n        <Typography variant=\"h5\" component=\"h3\" gutterBottom>\r\n          {this.props.menu.question}\r\n        </Typography>\r\n        <RadioGroup>\r\n          {this.props.menu.options.map((option, index) => {\r\n            return (\r\n              <div className=\"padLeft\" key={index}>\r\n                <CallSetupOption\r\n                  option={option}\r\n                  key={index}\r\n                  onClick={() => this.props.onChoose(option)}\r\n                />\r\n              </div>\r\n            );\r\n          })}\r\n        </RadioGroup>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport PhoneIcon from \"@material-ui/icons/Phone\";\r\nimport \"./CallPage.css\";\r\n\r\ninterface Props {\r\n  phoneNumber: string;\r\n}\r\n\r\nexport default class CallSetupQuestion extends React.Component<Props> {\r\n  render() {\r\n    return (\r\n      <div className=\"callPageContainer\">\r\n        <Typography variant=\"body2\" component=\"span\">\r\n          Great! You've selected all the options and we generated a phone number\r\n          for you that will skip all the annoying menu prompts.\r\n          <br />\r\n          <br />\r\n          Keep in mind that because some menus take a while to work, don't press\r\n          any keys until you hear hold music or ringing. Thank you!\r\n        </Typography>\r\n        <TextField\r\n          label=\"Generated Phone Number\"\r\n          defaultValue={this.props.phoneNumber}\r\n          margin=\"normal\"\r\n          InputProps={{\r\n            readOnly: true\r\n          }}\r\n          variant=\"outlined\"\r\n          className=\"spaceTop\"\r\n        />\r\n        <Button\r\n          color=\"primary\"\r\n          href={`tel:${this.props.phoneNumber}`}\r\n          endIcon={<PhoneIcon />}\r\n          variant=\"contained\"\r\n        >\r\n          Start Call\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { Callee, Menu, MenuOption } from \"../interface\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport UndoIcon from \"@material-ui/icons/Undo\";\r\nimport CallSetupQuestion from \"../CallSetupQuestion/CallSetupQuestion\";\r\nimport CallPage from \"../CallPage/CallPage\";\r\n\r\nimport \"./CallSetupPage.css\";\r\nimport { Container } from \"@material-ui/core\";\r\n\r\ninterface Props {\r\n  callee: Callee;\r\n  menu: Menu;\r\n  onClose?: () => void;\r\n}\r\n\r\ninterface State {\r\n  displayClass: \"visible\" | \"invisible\";\r\n  currentMenu: Menu | null;\r\n}\r\n\r\nexport default class CallSetupPage extends React.Component<Props, State> {\r\n  container: React.ReactNode;\r\n  selections: MenuOption[];\r\n\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.state = { displayClass: \"visible\", currentMenu: this.props.menu };\r\n    this.selections = [];\r\n  }\r\n\r\n  startCloseTransition = () => {\r\n    this.setState({ displayClass: \"invisible\" });\r\n    if (this.props.onClose) {\r\n      window.setTimeout(this.props.onClose, 250);\r\n    }\r\n  };\r\n\r\n  handleChoice = (selection: MenuOption) => {\r\n    this.selections.push(selection);\r\n    this.setState({ currentMenu: selection.next });\r\n  };\r\n\r\n  handleUndo = () => {\r\n    this.selections.pop();\r\n    this.setState({\r\n      currentMenu:\r\n        this.selections.length > 0\r\n          ? this.selections[this.selections.length - 1].next\r\n          : this.props.menu\r\n    });\r\n  };\r\n\r\n  generatePhoneNumber = (): string => {\r\n    let result = this.props.callee.phoneNumber;\r\n    this.selections.forEach(selection => {\r\n      result += `,,,${selection.dialNumber}`\r\n    });\r\n    return result;\r\n  };\r\n\r\n  render() {\r\n    let page: React.ReactNode;\r\n    if (this.state.currentMenu !== null) {\r\n      page = (\r\n        <CallSetupQuestion\r\n          menu={this.state.currentMenu}\r\n          onChoose={selection => this.handleChoice(selection)}\r\n        />\r\n      );\r\n    } else {\r\n      page = <CallPage phoneNumber={this.generatePhoneNumber()} />;\r\n    }\r\n\r\n    return (\r\n      <div className={`callSetupContainer ${this.state.displayClass}`}>\r\n        <AppBar position=\"static\">\r\n          <Toolbar className=\"callSetupAppBar\">\r\n            <IconButton\r\n              edge=\"start\"\r\n              color=\"inherit\"\r\n              onClick={this.startCloseTransition}\r\n            >\r\n              <CloseIcon />\r\n            </IconButton>\r\n            <Typography variant=\"h6\" component=\"h2\" display=\"inline\">\r\n              Call Setup: {this.props.callee.name}\r\n            </Typography>\r\n          </Toolbar>\r\n        </AppBar>\r\n        <Container className=\"callSetupPageContainer\" maxWidth=\"md\">\r\n          {page}\r\n          {this.state.currentMenu !== this.props.menu && (\r\n            <Toolbar className=\"callSetupPageContainerBottom\">\r\n              <Button\r\n                color=\"primary\"\r\n                startIcon={<UndoIcon />}\r\n                variant=\"outlined\"\r\n                onClick={this.handleUndo}\r\n              >\r\n                Undo\r\n              </Button>\r\n            </Toolbar>\r\n          )}\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import { Menu, Callee } from \"./interface\";\r\n\r\nconst ENDPOINT = process.env.REACT_APP_SERVER_BASE;\r\nconsole.log(ENDPOINT);\r\n\r\nasync function getJsonData(url: string): Promise<any> {\r\n  const response = await fetch(url);\r\n  if (response.ok) {\r\n    return await response.json();\r\n  } else {\r\n    console.info(response);\r\n    throw new Error(response.statusText);\r\n  }\r\n}\r\n\r\nexport async function loadMenuByID(menuID: string): Promise<Menu> {\r\n  return await getJsonData(`${ENDPOINT}/menus/${menuID}`);\r\n}\r\n\r\nexport async function loadCompanies(): Promise<Callee[]> {\r\n  return await getJsonData(`${ENDPOINT}/all-callees`);\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\n\nimport MainPage from \"./MainPage/MainPage\";\nimport CallSetupPage from \"./CallSetupPage/CallSetupPage\";\nimport { Callee } from \"./interface\";\nimport { loadMenuByID, loadCompanies } from \"./fetchData\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst APP_NAME = \"Miniature Carnival\";\n\ninterface State {\n  callSetupPage?: React.ReactNode;\n  companies?: Callee[];\n  loading: boolean;\n}\n\nexport default class App extends React.Component<{}, State> {\n  constructor(props: {}) {\n    super(props);\n    this.state = {\n      callSetupPage: undefined,\n      loading: true\n    };\n    this.loadCompanies();\n  }\n\n  goHome = () => {\n    this.setState({\n      callSetupPage: undefined\n    });\n  };\n\n  goToCallSetup = async (callee: Callee) => {\n    this.setState({ loading: true });\n    const menu = await loadMenuByID(callee.menuID);\n    this.setState({\n      callSetupPage: (\n        <CallSetupPage onClose={this.goHome} callee={callee} menu={menu} />\n      ),\n      loading: false\n    });\n  };\n\n  loadCompanies = async () => {\n    try {\n      const companies = await loadCompanies();\n      this.setState({ companies: companies, loading: false });\n    } catch (e) {\n      alert(\n        \"Sorry, there was an error loading data. Please refresh to try again!\"\n      );\n      console.error(e);\n    }\n  };\n\n  render() {\n    return (\n      <>\n        {this.state.companies !== undefined ? (\n          <MainPage\n            callees={this.state.companies}\n            appName={APP_NAME}\n            onSelectCallee={this.goToCallSetup}\n          />\n        ) : (\n          <Typography variant=\"body2\">Loading...</Typography>\n        )}\n        ;\n        <CircularProgress\n          className={`loadingProgress ${\n            this.state.loading ? \"visible\" : \"hidden\"\n          }`}\n        />\n        {this.state.callSetupPage}\n      </>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}